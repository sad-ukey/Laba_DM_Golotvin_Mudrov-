import logging
import asyncio
import nest_asyncio
import calendar
from datetime import datetime, date, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from pymongo import MongoClient
from bson.objectid import ObjectId


nest_asyncio.apply()


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["task_planner"]
entries_collection = db["entries"]
tasks_collection = db["tasks"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
def get_main_keyboard():
    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"],
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"],
        ["–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞ –¥–∞—Ç—É"],
        ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"],
        ["–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"],
        ["–û—Ç–º–µ–Ω–∞"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# --------------- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---------------
def add_entry(date_str: str, text: str):
    entry = {"date": date_str, "text": text}
    entries_collection.insert_one(entry)


def get_entries(date_str: str):
    return list(entries_collection.find({"date": date_str}))


def add_task(text: str, deadline: str, chat_id: int, status: str = "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", date_created: str = None):
    if date_created is None:
        date_created = date.today().isoformat()
    task = {
        "text": text,
        "deadline": deadline,  # ISO-—Ñ–æ—Ä–º–∞—Ç
        "status": status,
        "date_created": date_created,
        "chat_id": chat_id,
        "reminders": {"day": False, "hour": False, "on_time": False},
    }
    tasks_collection.insert_one(task)


def get_tasks_by_date(date_str: str, chat_id: int):
    return list(tasks_collection.find({"date_created": date_str, "chat_id": chat_id}))


def get_tasks_by_chat(chat_id: int):
    return list(tasks_collection.find({"chat_id": chat_id}))


def update_task(task_id: str, new_text: str = None, new_status: str = None):
    update_fields = {}
    if new_text is not None:
        update_fields["text"] = new_text
    if new_status is not None:
        update_fields["status"] = new_status
    if update_fields:
        tasks_collection.update_one({"_id": ObjectId(task_id)}, {"$set": update_fields})


def delete_tasks_by_date(date_str: str, chat_id: int):
    tasks_collection.delete_many({"date_created": date_str, "chat_id": chat_id})


def delete_all_tasks():
    return tasks_collection.delete_many({})


def delete_all_entries():
    return entries_collection.delete_many({})


# --------------- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ ---------------
async def check_deadlines(bot):
    now = datetime.now()
    tasks = list(tasks_collection.find())
    for task in tasks:
        chat_id = task.get("chat_id")
        if not chat_id:
            continue
        try:
            deadline_dt = datetime.fromisoformat(task["deadline"])
        except Exception:
            continue
        reminders = task.get("reminders", {"day": False, "hour": False, "on_time": False})
        if not reminders.get("day") and (deadline_dt - now) <= timedelta(days=1) and deadline_dt > now:
            message = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n"
                f"–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ <b>{task['text']}</b> –æ—Å—Ç–∞–ª–æ—Å—å <b>1 –¥–µ–Ω—å</b>.\n"
                f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_dt.strftime('%d.%m.%Y %H:%M')}"
            )
            await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
            reminders["day"] = True
        if not reminders.get("hour") and (deadline_dt - now) <= timedelta(hours=1) and deadline_dt > now:
            message = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n"
                f"–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ <b>{task['text']}</b> –æ—Å—Ç–∞–ª—Å—è <b>1 —á–∞—Å</b>.\n"
                f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_dt.strftime('%d.%m.%Y %H:%M')}"
            )
            await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
            reminders["hour"] = True
        if not reminders.get("on_time") and now >= deadline_dt:
            message = (
                f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
                f"–°–µ–π—á–∞—Å –Ω–∞—Å—Ç—É–ø–∏–ª –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏: <b>{task['text']}</b>.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏!"
            )
            await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
            reminders["on_time"] = True
        tasks_collection.update_one({"_id": task["_id"]}, {"$set": {"reminders": reminders}})


async def deadline_loop(app: Application):
    while True:
        await check_deadlines(app.bot)
        await asyncio.sleep(60)


# --------------- –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ <i>–û—Ç–º–µ–Ω–∞</i>."
    )
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_main_keyboard())


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    return ConversationHandler.END


# --------------- –î–∏–∞–ª–æ–≥: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ---------------
ADD_ENTRY_TEXT = 0


async def add_entry_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:", parse_mode="HTML")
    return ADD_ENTRY_TEXT


async def add_entry_receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    today = date.today().isoformat()
    add_entry(today, text)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


add_entry_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å$"), add_entry_start)],
    states={
        ADD_ENTRY_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_entry_receive_text)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ ---------------
VIEW_ENTRIES_DATE = 0


async def view_entries_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏:",
                                    parse_mode="HTML")
    return VIEW_ENTRIES_DATE


async def view_entries_receive_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text
    entries = get_entries(date_str)
    if not entries:
        response = "‚ùå <b>–ó–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>"
    else:
        response = "\n".join([f"üìÖ <b>{entry['date']}</b> ‚Äî ‚úèÔ∏è {entry['text']}" for entry in entries])
    await update.message.reply_text(response, parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


view_entries_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏$"), view_entries_start)],
    states={
        VIEW_ENTRIES_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_entries_receive_date)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –≤–≤–æ–¥ –≥–æ–¥–∞, –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏ —á–∏—Å–ª–∞ ---------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è: 0 - —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, 1 - –≥–æ–¥, 2 - –º–µ—Å—è—Ü, 3 - –¥–µ–Ω—å, 4 - –≤—Ä–µ–º—è
ADD_TASK_TEXT, ADD_TASK_YEAR, ADD_TASK_MONTH, ADD_TASK_DAY, ADD_TASK_TIME = range(5)


async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", parse_mode="HTML")
    return ADD_TASK_TEXT


async def add_task_receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_text"] = update.message.text
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025):", parse_mode="HTML")
    return ADD_TASK_YEAR


async def add_task_receive_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year_text = update.message.text.strip()
    try:
        year = int(year_text)
        if year < 1900 or year > 3000:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025):", parse_mode="HTML")
        return ADD_TASK_YEAR
    context.user_data["task_year"] = year
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = generate_month_keyboard()
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard, parse_mode="HTML")
    return ADD_TASK_MONTH


def generate_month_keyboard():
    months = [
        ("–Ø–Ω–≤–∞—Ä—å", 1), ("–§–µ–≤—Ä–∞–ª—å", 2), ("–ú–∞—Ä—Ç", 3),
        ("–ê–ø—Ä–µ–ª—å", 4), ("–ú–∞–π", 5), ("–ò—é–Ω—å", 6),
        ("–ò—é–ª—å", 7), ("–ê–≤–≥—É—Å—Ç", 8), ("–°–µ–Ω—Ç—è–±—Ä—å", 9),
        ("–û–∫—Ç—è–±—Ä—å", 10), ("–ù–æ—è–±—Ä—å", 11), ("–î–µ–∫–∞–±—Ä—å", 12)
    ]
    buttons = []
    row = []
    for i, (name, month_num) in enumerate(months, start=1):
        row.append(InlineKeyboardButton(text=name, callback_data=f"month_{month_num}"))
        if i % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons)


async def add_task_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("month_"):
        month = int(data.split("_")[1])
        context.user_data["task_month"] = month
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
        year = context.user_data.get("task_year")
        num_days = calendar.monthrange(year, month)[1]
        keyboard = generate_day_keyboard(num_days)
        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=keyboard, parse_mode="HTML")
        return ADD_TASK_DAY
    else:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_TASK_MONTH


def generate_day_keyboard(num_days):
    buttons = []
    row = []
    for day in range(1, num_days + 1):
        row.append(InlineKeyboardButton(text=str(day), callback_data=f"day_{day}"))
        if day % 7 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons)


async def add_task_day_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("day_"):
        day = int(data.split("_")[1])
        context.user_data["task_day"] = day
        await query.edit_message_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):",
                                      parse_mode="HTML")
        return ADD_TASK_TIME
    else:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_TASK_DAY


async def add_task_receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_input = update.message.text.strip()
    try:
        time_obj = datetime.strptime(time_input, "%H:%M").time()
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):",
            parse_mode="HTML"
        )
        return ADD_TASK_TIME
    # –°–æ–±–∏—Ä–∞–µ–º –≥–æ–¥, –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å
    year = context.user_data.get("task_year")
    month = context.user_data.get("task_month")
    day = context.user_data.get("task_day")
    try:
        deadline_dt = datetime(year, month, day, time_obj.hour, time_obj.minute)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        return ConversationHandler.END
    deadline_iso = deadline_dt.isoformat()
    task_text = context.user_data.get("task_text")
    chat_id = update.message.chat.id
    add_task(task_text, deadline_iso, chat_id)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


add_task_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task_start)],
    states={
        ADD_TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_receive_text)],
        ADD_TASK_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_receive_year)],
        ADD_TASK_MONTH: [CallbackQueryHandler(add_task_month_selected, pattern="^month_")],
        ADD_TASK_DAY: [CallbackQueryHandler(add_task_day_selected, pattern="^day_")],
        ADD_TASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_receive_time)],
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ ---------------
VIEW_TASKS_DATE = 0


async def view_tasks_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏:",
                                    parse_mode="HTML")
    return VIEW_TASKS_DATE


async def view_tasks_receive_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text
    chat_id = update.message.chat.id
    tasks = get_tasks_by_date(date_str, chat_id)
    if not tasks:
        response = "‚ùå <b>–ó–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>"
    else:
        now = datetime.now()
        response_lines = []
        for task in tasks:
            try:
                deadline_dt = datetime.fromisoformat(task["deadline"])
                time_remaining = deadline_dt - now
                remaining_str = "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ" if time_remaining.total_seconds() < 0 else \
                str(time_remaining).split('.')[0]
            except Exception:
                remaining_str = "–û—à–∏–±–∫–∞ –≤ –¥–µ–¥–ª–∞–π–Ω–µ"
            response_lines.append(
                f"üÜî <b>{task['_id']}</b> | üìù {task['text']} | üìÖ {deadline_dt.strftime('%d.%m.%Y %H:%M')} | üîÑ {task['status']} | ‚è≥ {remaining_str}"
            )
        response = "\n".join(response_lines)
    await update.message.reply_text(response, parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


view_tasks_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏$"), view_tasks_start)],
    states={
        VIEW_TASKS_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_tasks_receive_date)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞) ---------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è: 0 - –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏, 1 - –≤—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, 2 - –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, 3 - –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
UPDATE_TASK_SELECT, UPDATE_TASK_TEXT_OPTION, UPDATE_TASK_TEXT_INPUT, UPDATE_TASK_STATUS = range(4)


async def update_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    tasks = get_tasks_by_chat(chat_id)
    if not tasks:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    buttons = []
    for task in tasks:
        deadline_dt = datetime.fromisoformat(task["deadline"])
        button_text = f"üìù {task['text']} (üìÖ {deadline_dt.strftime('%d.%m.%Y %H:%M')})"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"upd_{task['_id']}")])
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return UPDATE_TASK_SELECT


async def update_task_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("upd_"):
        task_id = data[4:]
        context.user_data["update_task_id"] = task_id
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="text_change"),
             InlineKeyboardButton("üîí –ù–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç", callback_data="text_keep")]
        ])
        await query.edit_message_text("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏?", reply_markup=keyboard)
        return UPDATE_TASK_TEXT_OPTION
    return ConversationHandler.END


async def update_task_text_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "text_change":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        return UPDATE_TASK_TEXT_INPUT
    elif data == "text_keep":
        context.user_data["update_task_new_text"] = None
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"),
             InlineKeyboardButton("‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
        return UPDATE_TASK_STATUS
    else:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return UPDATE_TASK_TEXT_OPTION


async def update_task_receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_text = update.message.text.strip()
    context.user_data["update_task_new_text"] = new_text
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"),
         InlineKeyboardButton("‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    return UPDATE_TASK_STATUS


async def update_task_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # —Ñ–æ—Ä–º–∞—Ç "status_–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" –∏–ª–∏ "status_–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    if data.startswith("status_"):
        new_status = data[7:]
        context.user_data["update_task_new_status"] = new_status
        task_id = context.user_data.get("update_task_id")
        new_text = context.user_data.get("update_task_new_text")
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É {task_id}: –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        try:
            update_task(task_id, new_text, new_status)
            await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        return ConversationHandler.END
    return ConversationHandler.END


update_task_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), update_task_start)],
    states={
        UPDATE_TASK_SELECT: [CallbackQueryHandler(update_task_select, pattern="^upd_")],
        UPDATE_TASK_TEXT_OPTION: [CallbackQueryHandler(update_task_text_option, pattern="^(text_change|text_keep)$")],
        UPDATE_TASK_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_task_receive_text)],
        UPDATE_TASK_STATUS: [CallbackQueryHandler(update_task_status_handler, pattern="^status_")],
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞ –¥–∞—Ç—É ---------------
DELETE_TASKS_DATE = 0


async def delete_tasks_date_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏:",
                                    parse_mode="HTML")
    return DELETE_TASKS_DATE


async def delete_tasks_date_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text
    chat_id = update.message.chat.id
    delete_tasks_by_date(date_str, chat_id)
    await update.message.reply_text("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω—ã.", parse_mode="HTML",
                                    reply_markup=get_main_keyboard())
    return ConversationHandler.END


delete_tasks_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞ –¥–∞—Ç—É$"), delete_tasks_date_start)],
    states={
        DELETE_TASKS_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_tasks_date_receive)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ ---------------
CONFIRM_DELETE_ALL_ENTRIES = 0


async def delete_all_entries_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> –∑–∞–ø–∏—Å–∏? –ù–∞–ø–∏—à–∏—Ç–µ <i>–¥–∞</i> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        parse_mode="HTML",
    )
    return CONFIRM_DELETE_ALL_ENTRIES


async def delete_all_entries_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        result = delete_all_entries()
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.deleted_count}.", parse_mode="HTML",
                                        reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


delete_all_entries_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏$"), delete_all_entries_start)],
    states={
        CONFIRM_DELETE_ALL_ENTRIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_all_entries_confirm)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)

# --------------- –î–∏–∞–ª–æ–≥: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ ---------------
CONFIRM_DELETE_ALL_TASKS = 0


async def delete_all_tasks_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> –∑–∞–¥–∞—á–∏? –ù–∞–ø–∏—à–∏—Ç–µ <i>–¥–∞</i> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        parse_mode="HTML",
    )
    return CONFIRM_DELETE_ALL_TASKS


async def delete_all_tasks_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        result = delete_all_tasks()
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {result.deleted_count}.", parse_mode="HTML",
                                        reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML", reply_markup=get_main_keyboard())
    return ConversationHandler.END


delete_all_tasks_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏$"), delete_all_tasks_start)],
    states={
        CONFIRM_DELETE_ALL_TASKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_all_tasks_confirm)]
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
)


# --------------- –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –¥–∏–∞–ª–æ–≥–∞) ---------------
async def view_all_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_entries = list(entries_collection.find())
    all_tasks = list(tasks_collection.find())

    response_parts = ["<b>–í–°–ï –î–ê–ù–ù–´–ï:</b>"]
    response_parts.append("\n<b>–ó–∞–ø–∏—Å–∏:</b>")
    if not all_entries:
        response_parts.append("  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    else:
        for entry in all_entries:
            response_parts.append(f"  üìÖ <b>{entry.get('date', 'N/A')}</b> ‚Äî ‚úèÔ∏è {entry.get('text', '')}")

    response_parts.append("\n<b>–ó–∞–¥–∞—á–∏:</b>")
    if not all_tasks:
        response_parts.append("  –ù–µ—Ç –∑–∞–¥–∞—á.")
    else:
        now = datetime.now()
        for task in all_tasks:
            try:
                deadline_dt = datetime.fromisoformat(task["deadline"])
                time_remaining = deadline_dt - now
                remaining_str = "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ" if time_remaining.total_seconds() < 0 else \
                str(time_remaining).split('.')[0]
            except Exception:
                remaining_str = "–û—à–∏–±–∫–∞ –≤ –¥–µ–¥–ª–∞–π–Ω–µ"
            response_parts.append(
                f"  üÜî <b>{task.get('_id')}</b> | üìù {task.get('text')} | üìÖ {datetime.fromisoformat(task.get('deadline')).strftime('%d.%m.%Y %H:%M')} | üîÑ {task.get('status')} | ‚è≥ {remaining_str}"
            )
    await update.message.reply_text("\n".join(response_parts), parse_mode="HTML", reply_markup=get_main_keyboard())


# --------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---------------
async def main():
    TOKEN = "7757802683:AAEAL6v68Jq9eoVSQwOWbKSSoJh5TNJu4sA"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(add_entry_conv)
    app.add_handler(view_entries_conv)
    app.add_handler(add_task_conv)
    app.add_handler(view_tasks_conv)
    app.add_handler(update_task_conv)
    app.add_handler(delete_tasks_conv)
    app.add_handler(delete_all_entries_conv)
    app.add_handler(delete_all_tasks_conv)
    app.add_handler(MessageHandler(filters.Regex("^–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ$"), view_all_data))
    app.add_handler(CommandHandler("cancel", cancel))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    app.create_task(deadline_loop(app))

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è event loop
    await app.run_polling(close_loop=False)


if __name__ == "__main__":
    import asyncio

    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.create_task(main())
    loop.run_forever()